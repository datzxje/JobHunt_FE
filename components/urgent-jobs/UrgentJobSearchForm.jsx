import { useState, useEffect } from 'react';

const jobCategories = [
  'T·∫•t c·∫£ ng√†nh ngh·ªÅ',
  'D·ªçn d·∫πp nh√† c·ª≠a',
  'S·ª≠a ch·ªØa ƒëi·ªán n∆∞·ªõc',
  'Chuy·ªÉn nh√†',
  'Giao h√†ng',
  'T√†i x·∫ø',
  'Ph·ª•c v·ª• b√†n',
  'N·∫•u ƒÉn',
  'ChƒÉm s√≥c tr·∫ª em',
  'ChƒÉm s√≥c ng∆∞·ªùi gi√†',
  'L√†m v∆∞·ªùn',
  'S∆°n nh√†',
  'Th·ª£ x√¢y',
  'Massage',
  'K·∫ø to√°n',
  'Gia s∆∞',
  'B√°n h√†ng',
];

const distances = [
  { label: 'Trong 1km', value: 1 },
  { label: 'Trong 3km', value: 3 },
  { label: 'Trong 5km', value: 5 },
  { label: 'Trong 10km', value: 10 },
  { label: 'Trong 20km', value: 20 },
];

const timeSlots = [
  'B·∫•t k·ª≥ l√∫c n√†o',
  'S√°ng (6h-12h)',
  'Chi·ªÅu (12h-18h)', 
  'T·ªëi (18h-22h)',
  'Cu·ªëi tu·∫ßn',
  'Ngay h√¥m nay',
  'Trong tu·∫ßn n√†y',
];

const salaryRanges = [
  'T·∫•t c·∫£ m·ª©c l∆∞∆°ng',
  '100-300k/ng√†y',
  '300-500k/ng√†y',
  '500k-1tr/ng√†y',
  'Tr√™n 1tr/ng√†y',
  '50-100k/gi·ªù',
  'Theo th·ªèa thu·∫≠n',
];

const UrgentJobSearchForm = ({ onSearch }) => {
  const [searchData, setSearchData] = useState({
    keyword: '',
    location: '',
    category: 'T·∫•t c·∫£ ng√†nh ngh·ªÅ',
    distance: 5,
    timeSlot: 'B·∫•t k·ª≥ l√∫c n√†o',
    salaryRange: 'T·∫•t c·∫£ m·ª©c l∆∞∆°ng',
    isUrgent: false,
    coordinates: null
  });

  const [isGettingLocation, setIsGettingLocation] = useState(false);
  const [locationError, setLocationError] = useState('');

  // Get current location
  const getCurrentLocation = () => {
    setIsGettingLocation(true);
    setLocationError('');
    
    if (!navigator.geolocation) {
      setLocationError('Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ ƒë·ªãnh v·ªã');
      setIsGettingLocation(false);
      return;
    }

    navigator.geolocation.getCurrentPosition(
      (position) => {
        const { latitude, longitude } = position.coords;
        setSearchData(prev => ({
          ...prev,
          coordinates: { lat: latitude, lng: longitude },
          location: 'V·ªã tr√≠ hi·ªán t·∫°i'
        }));
        setIsGettingLocation(false);
      },
      (error) => {
        let errorMessage = 'Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠';
        switch(error.code) {
          case error.PERMISSION_DENIED:
            errorMessage = 'B·∫°n ƒë√£ t·ª´ ch·ªëi chia s·∫ª v·ªã tr√≠';
            break;
          case error.POSITION_UNAVAILABLE:
            errorMessage = 'Th√¥ng tin v·ªã tr√≠ kh√¥ng kh·∫£ d·ª•ng';
            break;
          case error.TIMEOUT:
            errorMessage = 'H·∫øt th·ªùi gian ch·ªù l·∫•y v·ªã tr√≠';
            break;
        }
        setLocationError(errorMessage);
        setIsGettingLocation(false);
      },
      {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 60000
      }
    );
  };

  const handleInputChange = (field, value) => {
    setSearchData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (onSearch) {
      onSearch(searchData);
    }
  };

  // Auto-get location on component mount
  useEffect(() => {
    getCurrentLocation();
  }, []);

  return (
    <div className="mb-5">
      {/* Header */}
      <div className="text-center mb-4">
        <div className="d-flex align-items-center justify-content-center mb-2">
          <span className="badge bg-danger me-2 px-3 py-2" style={{fontSize: '0.9rem'}}>
            üî• VI·ªÜC L√ÄM TH·ªúI V·ª§
          </span>
          <span className="badge bg-success px-3 py-2" style={{fontSize: '0.9rem'}}>
            üìç T√åM G·∫¶N B·∫†N
          </span>
        </div>
        <h3 className="text-white fw-bold mb-2" style={{
          fontSize: '1.5rem',
          textShadow: '0 2px 10px rgba(0,0,0,0.7)'
        }}>
          T√¨m vi·ªác l√†m g·∫ßn nh√† ngay h√¥m nay
        </h3>
        <p className="text-white-50 mb-0" style={{fontSize: '0.95rem'}}>
          Nh·∫≠n vi·ªác nhanh - L√†m ngay - C√≥ l∆∞∆°ng h√¥m nay
        </p>
      </div>

      {/* Search Form */}
      <form
        className="urgent-job-search-form bg-white rounded-4 shadow-lg"
        style={{
          padding: '25px',
          boxShadow: '0 15px 35px rgba(0,0,0,0.15)',
          border: '2px solid #e3f2fd',
        }}
        onSubmit={handleSubmit}
      >
        {/* Row 1: Main search */}
        <div className="row g-3 mb-3">
          <div className="col-md-6">
            <label className="form-label fw-semibold text-muted small">T√¨m vi·ªác g√¨?</label>
            <div className="position-relative">
              <i className="fas fa-search position-absolute" style={{
                left: '15px', top: '50%', transform: 'translateY(-50%)',
                color: '#007bff', fontSize: '14px'
              }}></i>
              <input
                type="text"
                className="form-control"
                placeholder="VD: d·ªçn nh√†, giao h√†ng, t√†i x·∫ø..."
                value={searchData.keyword}
                onChange={e => handleInputChange('keyword', e.target.value)}
                style={{
                  paddingLeft: '45px',
                  height: '50px',
                  border: '2px solid #e9ecef',
                  borderRadius: '12px'
                }}
              />
            </div>
          </div>

          <div className="col-md-6">
            <label className="form-label fw-semibold text-muted small">L√†m vi·ªác ·ªü ƒë√¢u?</label>
            <div className="position-relative">
              <i className="fas fa-map-marker-alt position-absolute" style={{
                left: '15px', top: '50%', transform: 'translateY(-50%)',
                color: '#28a745', fontSize: '14px'
              }}></i>
              <input
                type="text"
                className="form-control"
                placeholder="VD: Qu·∫≠n 1, Ph∆∞·ªùng B·∫øn Ngh√©..."
                value={searchData.location}
                onChange={e => handleInputChange('location', e.target.value)}
                style={{
                  paddingLeft: '45px',
                  paddingRight: '45px',
                  height: '50px',
                  border: '2px solid #e9ecef',
                  borderRadius: '12px'
                }}
              />
              <button
                type="button"
                className="btn btn-link position-absolute p-0"
                onClick={getCurrentLocation}
                disabled={isGettingLocation}
                style={{
                  right: '10px', top: '50%', transform: 'translateY(-50%)',
                  fontSize: '14px', color: '#28a745'
                }}
                title="L·∫•y v·ªã tr√≠ hi·ªán t·∫°i"
              >
                {isGettingLocation ? (
                  <i className="fas fa-spinner fa-spin"></i>
                ) : (
                  <i className="fas fa-crosshairs"></i>
                )}
              </button>
            </div>
            {locationError && (
              <small className="text-danger mt-1 d-block">{locationError}</small>
            )}
          </div>
        </div>

        {/* Row 2: Filters */}
        <div className="row g-3 mb-3">
          <div className="col-md-3 col-6">
            <label className="form-label fw-semibold text-muted small">Ng√†nh ngh·ªÅ</label>
            <select
              className="form-select"
              value={searchData.category}
              onChange={e => handleInputChange('category', e.target.value)}
              style={{
                height: '45px',
                border: '2px solid #e9ecef',
                borderRadius: '10px'
              }}
            >
              {jobCategories.map(cat => (
                <option key={cat} value={cat}>{cat}</option>
              ))}
            </select>
          </div>

          <div className="col-md-3 col-6">
            <label className="form-label fw-semibold text-muted small">Kho·∫£ng c√°ch</label>
            <select
              className="form-select"
              value={searchData.distance}
              onChange={e => handleInputChange('distance', Number(e.target.value))}
              style={{
                height: '45px',
                border: '2px solid #e9ecef',
                borderRadius: '10px'
              }}
            >
              {distances.map(d => (
                <option key={d.value} value={d.value}>{d.label}</option>
              ))}
            </select>
          </div>

          <div className="col-md-3 col-6">
            <label className="form-label fw-semibold text-muted small">Th·ªùi gian</label>
            <select
              className="form-select"
              value={searchData.timeSlot}
              onChange={e => handleInputChange('timeSlot', e.target.value)}
              style={{
                height: '45px',
                border: '2px solid #e9ecef',
                borderRadius: '10px'
              }}
            >
              {timeSlots.map(slot => (
                <option key={slot} value={slot}>{slot}</option>
              ))}
            </select>
          </div>

          <div className="col-md-3 col-6">
            <label className="form-label fw-semibold text-muted small">M·ª©c l∆∞∆°ng</label>
            <select
              className="form-select"
              value={searchData.salaryRange}
              onChange={e => handleInputChange('salaryRange', e.target.value)}
              style={{
                height: '45px',
                border: '2px solid #e9ecef',
                borderRadius: '10px'
              }}
            >
              {salaryRanges.map(range => (
                <option key={range} value={range}>{range}</option>
              ))}
            </select>
          </div>
        </div>

        {/* Row 3: Urgent filter and submit */}
        <div className="row g-3 align-items-end">
          <div className="col-md-6">
            <div className="form-check form-switch">
              <input
                className="form-check-input"
                type="checkbox"
                id="urgentFilter"
                checked={searchData.isUrgent}
                onChange={e => handleInputChange('isUrgent', e.target.checked)}
                style={{transform: 'scale(1.2)'}}
              />
              <label className="form-check-label fw-semibold" htmlFor="urgentFilter">
                <span className="text-danger">üö® Ch·ªâ vi·ªác C·∫¶N G·∫§P</span>
                <small className="d-block text-muted">Vi·ªác c·∫ßn ng∆∞·ªùi trong 24h</small>
              </label>
            </div>
          </div>

          <div className="col-md-6 text-end">
            <button
              type="submit"
              className="btn btn-primary btn-lg px-4"
              style={{
                height: '55px',
                fontSize: '1.1rem',
                background: 'linear-gradient(135deg, #007bff, #0056b3)',
                border: 'none',
                borderRadius: '12px',
                boxShadow: '0 4px 15px rgba(0,123,255,0.3)',
                minWidth: '180px'
              }}
            >
              <i className="fas fa-bolt me-2"></i>
              T√¨m vi·ªác ngay
            </button>
          </div>
        </div>

        {/* Quick stats */}
        <div className="row mt-4 pt-3 border-top">
          <div className="col-12">
            <div className="d-flex justify-content-center flex-wrap gap-4">
              <div className="text-center">
                <div className="fw-bold text-primary h5 mb-0">2,847</div>
                <small className="text-muted">Vi·ªác h√¥m nay</small>
              </div>
              <div className="text-center">
                <div className="fw-bold text-success h5 mb-0">156</div>
                <small className="text-muted">Vi·ªác c·∫ßn g·∫•p</small>
              </div>
              <div className="text-center">
                <div className="fw-bold text-warning h5 mb-0">89%</div>
                <small className="text-muted">T·ª∑ l·ªá nh·∫≠n vi·ªác</small>
              </div>
              <div className="text-center">
                <div className="fw-bold text-info h5 mb-0">~45p</div>
                <small className="text-muted">Th·ªùi gian ph·∫£n h·ªìi</small>
              </div>
            </div>
          </div>
        </div>
      </form>

      <style jsx global>{`
        .urgent-job-search-form .form-control:focus,
        .urgent-job-search-form .form-select:focus {
          border-color: #007bff !important;
          box-shadow: 0 0 0 0.2rem rgba(0,123,255,.15) !important;
        }
        
        .urgent-job-search-form .form-control::placeholder {
          color: #adb5bd;
          opacity: 1;
        }
        
        .form-check-input:checked {
          background-color: #dc3545 !important;
          border-color: #dc3545 !important;
        }
        
        .btn:hover {
          transform: translateY(-2px);
          transition: all 0.2s ease;
        }
      `}</style>
    </div>
  );
};

export default UrgentJobSearchForm;